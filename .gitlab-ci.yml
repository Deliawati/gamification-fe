  stages:
    # - code-quality
    - build
    - deploy

  # sonarqube-check:
  #   stage: code-quality
  #   tags:
  #     - gamification
  #   image:
  #     name: sonarsource/sonar-scanner-cli:latest
  #     entrypoint: [ "" ]
  #   variables:
  #     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  #     GIT_DEPTH: "0"
  #     SONAR_HOST_URL: "http://10.60.165.153:9000"
  #   cache:
  #     key: "${CI_JOB_NAME}"
  #     paths:
  #       - .sonar/cache
  #   script:
  #     - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=900 -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectName="${CI_PROJECT_NAME} ${CI_COMMIT_REF_NAME}" -Dsonar.projectKey="${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}" -Dsonar.sources=${SONAR_SOURCES}
  #   only:
  #     - development
  #     - staging
  #     - production
  #   allow_failure: true

  # Deploy Jobs
  .deploy_job_development:
    image: openshift/origin-cli
    before_script:
      - curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-linux-amd64 -o /usr/local/bin/helm
      - chmod +x /usr/local/bin/helm
      - oc login ${SERVER_OKD} -u ${USER_OKD} -p $PASS_OKD -n ${NAMESPACE_DEVELOPMENT} --insecure-skip-tls-verify

  .deploy_job_staging:
    image: openshift/origin-cli
    before_script:
      - curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-linux-amd64 -o /usr/local/bin/helm
      - chmod +x /usr/local/bin/helm
      - oc login ${SERVER_OKD} -u ${USER_OKD_BPO} -p $PASS_OKD_BPO -n ${NAMESPACE_STAGING} --insecure-skip-tls-verify

  .deploy_job_production:
    image: openshift/origin-cli
    before_script:
      - curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-linux-amd64 -o /usr/local/bin/helm
      - chmod +x /usr/local/bin/helm
      - oc login ${SERVER_OKD} -u ${USER_OKD_BPO} -p $PASS_OKD_BPO -n ${NAMESPACE_PROD} --insecure-skip-tls-verify

# Development
  build:development:
    stage: build
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - mkdir -p /kaniko/.docker
      - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"username\":\"${HARBOR_USER}\",\"password\":\"${HARBOR_PASSWORD}\",\"auth\":\"$(printf "%s:%s" "${HARBOR_USER}" "${HARBOR_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
      - >-
        /kaniko/executor
        --cache=true --cache-repo="${HARBOR_REGISTRY}/dit-bpd-gamification/gamification-fe"
        --context "${CI_PROJECT_DIR}"
        --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
        --destination ${HARBOR_REGISTRY}/dit-bpd-gamification/gamification-fe:${APP_VERSION} 
    only:
      - DevLandingPage
    allow_failure: false

  deploy:development:
    extends: .deploy_job_development
    stage: deploy
    needs: ["build:development"]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - >-
        helm upgrade gamification-fe-services-dev ./.chart/development/
        --install
        --set image.version=${APP_VERSION}
        --set secret.name=${SECRET_REGISTRY}
        --set name.space=${NAMESPACE_DEVELOPMENT}
    only:
      - DevLandingPage
    allow_failure: false

  # Staging
  build:staging:
    stage: build
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - mkdir -p /kaniko/.docker
      - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"username\":\"${HARBOR_USER_PROD}\",\"password\":\"${HARBOR_PASSWORD_PROD}\",\"auth\":\"$(printf "%s:%s" "${HARBOR_USER_PROD}" "${HARBOR_PASSWORD_PROD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
      - >-
        /kaniko/executor
        --cache=true --cache-repo="${HARBOR_REGISTRY}/dit-bpo-gamification/gamification-fe-staging"
        --context "${CI_PROJECT_DIR}"
        --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
        --destination ${HARBOR_REGISTRY}/dit-bpo-gamification/gamification-fe-staging:${APP_VERSION} 
    only:
      - main
    allow_failure: false

  deploy:staging:
    extends: .deploy_job_staging
    stage: deploy
    needs: ["build:staging"]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - >-
        helm upgrade gamification-fe-services-staging ./.chart/staging/
        --install
        --set image.version=${APP_VERSION}
        --set secret.name=${SECRET_REGISTRY}
        --set name.space=${NAMESPACE_STAGING}
    only:
      - main
    allow_failure: false

  # Production
  build:production:
    stage: build
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - mkdir -p /kaniko/.docker
      - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"username\":\"${HARBOR_USER_PROD}\",\"password\":\"${HARBOR_PASSWORD_PROD}\",\"auth\":\"$(printf "%s:%s" "${HARBOR_USER_PROD}" "${HARBOR_PASSWORD_PROD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
      - >-
        /kaniko/executor
        --cache=true --cache-repo="${HARBOR_REGISTRY}/dit-bpo-gamification/gamification-fe-prod"
        --context "${CI_PROJECT_DIR}"
        --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
        --destination ${HARBOR_REGISTRY}/dit-bpo-gamification/gamification-fe-prod:${APP_VERSION} 
    only:
      - tags
    allow_failure: false

  deploy:production:
    extends: .deploy_job_production
    stage: deploy
    needs: ["build:production"]
    tags:
      - gamification
    script:
      - export APP_VERSION=`date +%Y.%m.%d`-${CI_COMMIT_BRANCH/stack\//}_${CI_COMMIT_SHORT_SHA}
      - >-
        helm upgrade gamification-fe-services-production ./.chart/production/
        --install
        --set image.version=${APP_VERSION}
        --set secret.name=${SECRET_REGISTRY}
        --set name.space=${NAMESPACE_PROD}
    only:
      - tags
    allow_failure: false
